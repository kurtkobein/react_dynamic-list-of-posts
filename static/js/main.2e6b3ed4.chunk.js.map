{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/Error/Error.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPostId","className","map","post","userId","title","id","type","onClick","NewCommentForm","React","memo","postComment","updateComments","setCommentLoading","useState","name","setName","email","setEmail","comment","setComment","isFormValid","setFormValid","changeFormValid","useEffect","submitHandler","e","a","preventDefault","postCommentBody","postId","body","Promise","all","placeholder","value","onChange","target","onBlur","disabled","classNames","Loader","Error","children","BASE_URL","wait","delay","resolve","setTimeout","getData","url","fetch","response","ok","reject","status","json","getUserPosts","userPostsUrl","getPostDetails","postUrl","getPostComments","commentsUrl","deleteComment","commentId","commentUrl","method","headers","JSON","stringify","PostDetails","setPost","comments","setComments","isCommentsVisible","setCommentsVisible","isCommentLoading","errorFetch","setErrorFetch","fetchPost","postFromServer","fetchComments","commentsFromServer","deleteCommentFromServer","postCommentToServer","length","App","setPosts","isPostsLoading","setLoading","selectedUserId","setSelectedUserId","fetchPosts","postsFromServer","htmlFor","ReactDOM","createPortal","document","Boolean","render","getElementById"],"mappings":"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","file":"static/js/main.2e6b3ed4.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport './PostsList.scss';\n\nimport { Post } from '../../react-app-env';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: null | number,\n  setSelectedPostId: Dispatch<SetStateAction<null | number>>;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId, setSelectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              {`[User #${post.userId}]: `}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => setSelectedPostId(null)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => setSelectedPostId(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport './NewCommentForm.scss';\nimport classNames from 'classnames';\n\nimport { Comment } from '../../react-app-env';\n\ntype Props = {\n  selectedPostId: number,\n  postComment: (comment: Omit<Comment, 'id'>) => void,\n  updateComments: () => void;\n  setCommentLoading: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  selectedPostId,\n  postComment,\n  updateComments,\n  setCommentLoading,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isFormValid, setFormValid] = useState(false);\n\n  const changeFormValid = () => {\n    if (name && email && comment) {\n      setFormValid(true);\n    } else {\n      setFormValid(false);\n    }\n  };\n\n  useEffect(() => {\n    changeFormValid();\n  }, [comment]);\n\n  const submitHandler = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    setCommentLoading(true);\n\n    const postCommentBody = {\n      postId: selectedPostId,\n      name,\n      email,\n      body: comment,\n    };\n\n    setName('');\n    setEmail('');\n    setComment('');\n\n    await Promise.all([postComment(postCommentBody), updateComments()]);\n    setCommentLoading(false);\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          onBlur={changeFormValid}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          onBlur={changeFormValid}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n          onBlur={changeFormValid}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={!isFormValid}\n        className={classNames(\n          'button',\n          'NewCommentForm__submit-button',\n          { 'NewCommentForm__submit-button--disabled': !isFormValid },\n        )}\n        onClick={(e) => submitHandler(e)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './Error.scss';\n\nexport const Error: React.FC = ({ children }) => {\n  return (\n    <div className=\"Error\">\n      {children}\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nconst wait = (delay: number) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n};\n\nexport const getData = async (url: string) => {\n  await wait(300);\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    return Promise.reject(new Error(`Something went wrong. Status code - ${response.status}`));\n  }\n\n  return response.json();\n};\n","import { BASE_URL, getData } from './api';\n\nexport const getUserPosts = async (userId: number | null = null) => {\n  const userPostsUrl = userId\n    ? `${BASE_URL}/posts/?userId=${userId}`\n    : `${BASE_URL}/posts/`;\n\n  return getData(userPostsUrl);\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const postUrl = `${BASE_URL}/posts/${postId}`;\n\n  return getData(postUrl);\n};\n","import { BASE_URL, getData } from './api';\nimport { Comment } from '../react-app-env';\n\nexport const getPostComments = (postId: number) => {\n  const commentsUrl = `${BASE_URL}/comments?postId=${postId}`;\n\n  return getData(commentsUrl);\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const commentUrl = `${BASE_URL}/comments/${commentId}`;\n\n  const response = await fetch(commentUrl, { method: 'DELETE' });\n\n  if (!response.ok) {\n    return Promise.reject(new Error(`Can't delete comment. Status code - ${response.status}`));\n  }\n\n  return response.json();\n};\n\nexport const postComment = async (comment: Omit<Comment, 'id'>) => {\n  const commentsUrl = 'https://mate.academy/students-api/comments';\n\n  const response = await fetch(commentsUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(comment),\n  });\n\n  if (!response.ok) {\n    return Promise.reject(new Error(`Can't post comment. Status code - ${response.status}`));\n  }\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { Loader } from '../Loader/Loader';\nimport { Error } from '../Error/Error';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, postComment } from '../../api/comments';\nimport { Post, Comment } from '../../react-app-env';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<null | Post>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsVisible, setCommentsVisible] = useState(true);\n  const [isCommentLoading, setCommentLoading] = useState(false);\n  const [errorFetch, setErrorFetch] = useState<null | string>(null);\n\n  const fetchPost = async () => {\n    setErrorFetch(null);\n\n    try {\n      const postFromServer = await getPostDetails(selectedPostId);\n\n      setPost(postFromServer);\n    } catch (error) {\n      setErrorFetch(`${error}`);\n    }\n  };\n\n  const fetchComments = async () => {\n    setErrorFetch(null);\n\n    try {\n      const commentsFromServer = await getPostComments(selectedPostId);\n\n      setComments(commentsFromServer);\n    } catch (error) {\n      setErrorFetch(`${error}`);\n    }\n  };\n\n  const deleteCommentFromServer = async (commentId: number) => {\n    setCommentLoading(true);\n    setErrorFetch(null);\n\n    try {\n      await Promise.all([deleteComment(commentId), fetchComments()]);\n    } catch (error) {\n      setErrorFetch(`${error}`);\n    }\n\n    setCommentLoading(false);\n  };\n\n  const postCommentToServer = async (comment: Omit<Comment, 'id'>) => {\n    try {\n      await postComment(comment);\n    } catch (error) {\n      setErrorFetch(`${error}`);\n    }\n  };\n\n  useEffect(() => {\n    setPost(null);\n    Promise.all([fetchComments(), fetchPost()]);\n  }, [selectedPostId]);\n\n  return (\n    !post ? (\n      <Loader />\n    ) : (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        {errorFetch && (\n          <Error>\n            {errorFetch}\n          </Error>\n        )}\n        <section className=\"PostDetails__post\">\n          <h3 className=\"PostDetails__title\">{post.title}</h3>\n          <p>{post.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          {isCommentLoading && (\n            <div className=\"PostDetails__loader\">\n              <Loader />\n            </div>\n          )}\n          <button\n            type=\"button\"\n            className={classNames('button', { 'button--invisible': comments.length === 0 })}\n            onClick={() => setCommentsVisible(!isCommentsVisible)}\n          >\n            {isCommentsVisible ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          {isCommentsVisible && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteCommentFromServer(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              selectedPostId={selectedPostId}\n              postComment={postCommentToServer}\n              updateComments={fetchComments}\n              setCommentLoading={setCommentLoading}\n            />\n          </div>\n        </section>\n      </div>\n    )\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserPosts } from './api/posts';\nimport { Loader } from './components/Loader/Loader';\nimport { Error } from './components/Error/Error';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoading, setLoading] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState<null | number>(null);\n  const [selectedPostId, setSelectedPostId] = useState<null | number>(null);\n  const [errorFetch, setErrorFetch] = useState<null | string>(null);\n\n  const fetchPosts = async (userId: number | null = null) => {\n    try {\n      const postsFromServer = await getUserPosts(userId);\n\n      setLoading(false);\n      setPosts(postsFromServer);\n    } catch (error) {\n      setLoading(false);\n      setErrorFetch(`${error}`);\n    }\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    setErrorFetch(null);\n\n    if (!selectedUserId) {\n      fetchPosts();\n    } else {\n      fetchPosts(selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"select\"\n            className=\"App__user-selector\"\n            value={selectedUserId ? `${selectedUserId}` : '0'}\n            onChange={(e) => setSelectedUserId(e.target.value ? +e.target.value : null)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {errorFetch && (\n            ReactDOM.createPortal(\n              <Error>\n                {errorFetch}\n              </Error>,\n              document.body,\n            )\n          )}\n\n          {isPostsLoading\n            ? <Loader />\n            : (Boolean(errorFetch) || (\n              <PostsList\n                posts={posts}\n                selectedPostId={selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n              />\n            ))}\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}