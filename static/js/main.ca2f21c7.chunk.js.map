{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPostId","className","map","post","userId","title","id","type","onClick","NewCommentForm","postComment","updateComments","setCommentLoading","useState","name","setName","email","setEmail","comment","setComment","isFormValid","setFormValid","useEffect","submitHandler","e","a","preventDefault","postCommentBody","postId","body","placeholder","value","onChange","target","disabled","classNames","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","getData","url","fetch","response","ok","reject","Error","status","json","getUserPosts","userPostsUrl","getPostDetails","postUrl","getPostComments","commentsUrl","deleteComment","commentId","commentUrl","method","headers","JSON","stringify","PostDetails","setPost","comments","setComments","isCommentsVisible","setCommentsVisible","isCommentLoading","fetchPost","postFromServer","console","log","fetchComments","commentsFromServer","deleteCommentFromServer","postCommentToServer","error","App","setPosts","isPostsLoading","setLoading","selectedUserId","setSelectedUserId","fetchPosts","postsFromServer","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca2f21c7.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport './PostsList.scss';\n\nimport { Post } from '../../react-app-env';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: null | number,\n  setSelectedPostId: Dispatch<SetStateAction<null | number>>;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId, setSelectedPostId }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPostId(null)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPostId(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './NewCommentForm.scss';\nimport classNames from 'classnames';\n\nimport { Comment } from '../../react-app-env';\n\ntype Props = {\n  postComment: (comment: Omit<Comment, 'id'>) => void,\n  selectedPostId: number,\n  updateComments: () => void;\n  setCommentLoading: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postComment,\n  selectedPostId,\n  updateComments,\n  setCommentLoading,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isFormValid, setFormValid] = useState(false);\n\n  useEffect(() => {\n    if (name && email && comment) {\n      setFormValid(true);\n    } else {\n      setFormValid(false);\n    }\n  });\n\n  const submitHandler = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    setCommentLoading(true);\n\n    const postCommentBody = {\n      postId: selectedPostId,\n      name,\n      email,\n      body: comment,\n    };\n\n    setName('');\n    setEmail('');\n    setComment('');\n\n    postComment(postCommentBody);\n    await updateComments();\n    setCommentLoading(false);\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={!isFormValid}\n        className={classNames(\n          'button',\n          'NewCommentForm__submit-button',\n          { 'NewCommentForm__submit-button--disabled': !isFormValid },\n        )}\n        onClick={(e) => submitHandler(e)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nconst wait = (delay: number) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n};\n\nexport const getData = async (url: string) => {\n  await wait(750);\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    return Promise.reject(new Error(`Status code - ${response.status}`));\n  }\n\n  return response.json();\n};\n","import { BASE_URL, getData } from './api';\n\nexport const getUserPosts = async (userId: string) => {\n  const userPostsUrl = userId\n    ? `${BASE_URL}/posts/?userId=${userId}`\n    : `${BASE_URL}/posts/`;\n\n  return getData(userPostsUrl);\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const postUrl = `${BASE_URL}/posts/${postId}`;\n\n  return getData(postUrl);\n};\n","import { BASE_URL, getData } from './api';\nimport { Comment } from '../react-app-env';\n\nexport const getPostComments = (postId: number) => {\n  const commentsUrl = `${BASE_URL}/comments?postId=${postId}`;\n\n  return getData(commentsUrl);\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const commentUrl = `${BASE_URL}/comments/${commentId}`;\n\n  const response = await fetch(commentUrl, { method: 'DELETE' });\n\n  if (!response.ok) {\n    return Promise.reject(new Error(`Status code - ${response.status}`));\n  }\n\n  return response.json();\n};\n\nexport const postComment = async (comment: Omit<Comment, 'id'>) => {\n  const commentsUrl = 'https://mate.academy/students-api/comments';\n\n  const response = await fetch(commentsUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(comment),\n  });\n\n  if (!response.ok) {\n    return Promise.reject(new Error(`Status code - ${response.status}`));\n  }\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { Loader } from '../Loader/Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, postComment } from '../../api/comments';\nimport { Post, Comment } from '../../react-app-env';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<null | Post>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsVisible, setCommentsVisible] = useState(true);\n  const [isCommentLoading, setCommentLoading] = useState(false);\n\n  const fetchPost = async () => {\n    try {\n      const postFromServer = await getPostDetails(selectedPostId);\n\n      setPost(postFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const fetchComments = async () => {\n    try {\n      const commentsFromServer = await getPostComments(selectedPostId);\n\n      setComments(commentsFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const deleteCommentFromServer = async (commentId: number) => {\n    setCommentLoading(true);\n    deleteComment(commentId);\n    await fetchComments();\n    setCommentLoading(false);\n  };\n\n  const postCommentToServer = async (comment: Omit<Comment, 'id'>) => {\n    try {\n      postComment(comment);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setPost(null);\n    fetchComments();\n    fetchPost();\n  }, [selectedPostId]);\n\n  return (\n    !post ? (\n      <Loader />\n    ) : (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <h3 className=\"PostDetails__title\">{post.title}</h3>\n          <p>{post.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          {isCommentLoading && (\n            <div className=\"PostDetails__loader\">\n              <Loader />\n            </div>\n          )}\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setCommentsVisible(!isCommentsVisible)}\n          >\n            {isCommentsVisible ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          {isCommentsVisible && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteCommentFromServer(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              postComment={postCommentToServer}\n              selectedPostId={selectedPostId}\n              updateComments={fetchComments}\n              setCommentLoading={setCommentLoading}\n            />\n          </div>\n        </section>\n      </div>\n    )\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserPosts } from './api/posts';\nimport { Loader } from './components/Loader/Loader';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoading, setLoading] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState<null | number>(null);\n\n  const fetchPosts = async (userId: string) => {\n    try {\n      const postsFromServer = await getUserPosts(userId);\n\n      setLoading(false);\n      setPosts(postsFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setLoading(true);\n\n    if (selectedUserId === '0') {\n      fetchPosts('');\n    } else {\n      fetchPosts(selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"select\"\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(e) => setSelectedUserId(e.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isPostsLoading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                selectedPostId={selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n              />\n            )}\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}